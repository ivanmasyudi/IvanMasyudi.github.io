{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Selamat Datang di Repository Tugas \u00b6 Nama : Ivan Masyudi NIM : 180411100032 Jurusan : Teknik Informatika Matakuliah : Komputasi Numerik","title":"Beranda"},{"location":"#selamat-datang-di-repository-tugas","text":"Nama : Ivan Masyudi NIM : 180411100032 Jurusan : Teknik Informatika Matakuliah : Komputasi Numerik","title":"Selamat Datang di Repository Tugas"},{"location":"DERETMACLAURIN/","text":"DERET MACLAURIN \u00b6 Deret MacLaurin menyatakan bahwa setiap fungsi rill f(x) yang differentiable x = 0 dapat diuraikan menjadi deret polinomial: $$ f(x) = a0 + a1 x + a2x^2 + a3x^3 + ... $$ dengan $$ a_n = \\frac{1}{n!}f^n(0) $$ Dengan f^n(x) menyatakan turunan ke-n dari f(x). Notasi lain : f'(x) menyatakan turunan pertama, turunan f''(x) menyatakan turunan kedua, turunan f'''(x) menyatakan turunan ketiga, dst. Contoh: Uraikan f(x) = e^x dalam deret MacLaurin. Jawab: $$ f(x) = a0 + a1x + a2x^2 + a3x^3 + ... $$ a0, a1, a2, dst akan dicari satu per satu: Dengan demikian : $$ f(x) = ex = 1 + x + \\frac{1}{2!}x^2 + \\frac{1}{3!}x^3 +\u00b7\u00b7\u00b7 $$ PERHITUNGAN e^2x \u00b6 Dalam banyak masalah terapan, pilihan basis yang mudah digunakan adalah bilangan irasional e = 2,718281828... Bilangan ini disebut basis natural . Fungsi f ( x ) = ex disebut sebagai fungsi eksponensial natural. Gambar 7 menunjukkan grafik fungsi ini. Pastikan bahwa dalam melihat fungsi eksponensial f ( x ) = ex , e adalah konstanta 2,718281828\u2026, sedangkan x adalah variabel. f(x) = ex f'(x) = ex f'(0) = 1 f\u201d(x) = ex f\u201d(0) = 1 f\u201d'(x) = ex f\u201d'(0) = 1 Untuk bilangan e^2x maka: jadi, kesimpulannya adalah sebagai berikut: ketika nilai x diganti dengan 4 maka hasilnya adalah 296,99. LISTING PROGRAM \u00b6 Untuk membuat program agar dapat mengekspansi bilangan e^2x dengan nilai x=4 hingga nilai menjadi kurang dari 0,001 bisa dibuat dengan listing program sebagai berikut. import math x = 4 hasil = 1 a = 0 b = 1 iterasi = 1 while hasil > 0.001 : f_x = 0 f_y = 0 for i in range ( a ): f_x += int ( math . pow ( 2 , i )) * x ** i / math . factorial ( i ) for j in range ( b ): f_y += int ( math . pow ( 2 , j )) * x ** j / math . factorial ( j ) hasil = f_y - f_x a += 1 b += 1 print ( \"iterasi ke-\" , iterasi , \"= \" , hasil ) iterasi += 1 Output: iterasi ke - 1 = 1.0 iterasi ke - 2 = 8.0 iterasi ke - 3 = 32.0 iterasi ke - 4 = 85.33333333333333 iterasi ke - 5 = 170.66666666666669 iterasi ke - 6 = 273.0666666666666 iterasi ke - 7 = 364.08888888888896 iterasi ke - 8 = 416.1015873015872 iterasi ke - 9 = 416.1015873015872 iterasi ke - 10 = 369.8680776014112 iterasi ke - 11 = 295.89446208112895 iterasi ke - 12 = 215.195972422639 iterasi ke - 13 = 143.46398161509296 iterasi ke - 14 = 88.28552714774924 iterasi ke - 15 = 50.448872655856576 iterasi ke - 16 = 26.90606541645684 iterasi ke - 17 = 13.45303270822842 iterasi ke - 18 = 6.330838921519444 iterasi ke - 19 = 2.8137061873417224 iterasi ke - 20 = 1.184718394670199 iterasi ke - 21 = 0.47388735786807956 iterasi ke - 22 = 0.18052851728316455 iterasi ke - 23 = 0.06564673355751438 iterasi ke - 24 = 0.022833646454728296 iterasi ke - 25 = 0.0076112154847578495 iterasi ke - 26 = 0.0024355889549951826 iterasi ke - 27 = 0.0007494119863622473 Sekian dan terima kasih semoga bermanfaat. MathJax.Hub.Config({ tex2jax: {inlineMath: [['$$','$$']]} });","title":"Tugas 1 MacLaurin"},{"location":"DERETMACLAURIN/#deret-maclaurin","text":"Deret MacLaurin menyatakan bahwa setiap fungsi rill f(x) yang differentiable x = 0 dapat diuraikan menjadi deret polinomial: $$ f(x) = a0 + a1 x + a2x^2 + a3x^3 + ... $$ dengan $$ a_n = \\frac{1}{n!}f^n(0) $$ Dengan f^n(x) menyatakan turunan ke-n dari f(x). Notasi lain : f'(x) menyatakan turunan pertama, turunan f''(x) menyatakan turunan kedua, turunan f'''(x) menyatakan turunan ketiga, dst. Contoh: Uraikan f(x) = e^x dalam deret MacLaurin. Jawab: $$ f(x) = a0 + a1x + a2x^2 + a3x^3 + ... $$ a0, a1, a2, dst akan dicari satu per satu: Dengan demikian : $$ f(x) = ex = 1 + x + \\frac{1}{2!}x^2 + \\frac{1}{3!}x^3 +\u00b7\u00b7\u00b7 $$","title":"DERET MACLAURIN"},{"location":"DERETMACLAURIN/#perhitungan-e2x","text":"Dalam banyak masalah terapan, pilihan basis yang mudah digunakan adalah bilangan irasional e = 2,718281828... Bilangan ini disebut basis natural . Fungsi f ( x ) = ex disebut sebagai fungsi eksponensial natural. Gambar 7 menunjukkan grafik fungsi ini. Pastikan bahwa dalam melihat fungsi eksponensial f ( x ) = ex , e adalah konstanta 2,718281828\u2026, sedangkan x adalah variabel. f(x) = ex f'(x) = ex f'(0) = 1 f\u201d(x) = ex f\u201d(0) = 1 f\u201d'(x) = ex f\u201d'(0) = 1 Untuk bilangan e^2x maka: jadi, kesimpulannya adalah sebagai berikut: ketika nilai x diganti dengan 4 maka hasilnya adalah 296,99.","title":"PERHITUNGAN e^2x"},{"location":"DERETMACLAURIN/#listing-program","text":"Untuk membuat program agar dapat mengekspansi bilangan e^2x dengan nilai x=4 hingga nilai menjadi kurang dari 0,001 bisa dibuat dengan listing program sebagai berikut. import math x = 4 hasil = 1 a = 0 b = 1 iterasi = 1 while hasil > 0.001 : f_x = 0 f_y = 0 for i in range ( a ): f_x += int ( math . pow ( 2 , i )) * x ** i / math . factorial ( i ) for j in range ( b ): f_y += int ( math . pow ( 2 , j )) * x ** j / math . factorial ( j ) hasil = f_y - f_x a += 1 b += 1 print ( \"iterasi ke-\" , iterasi , \"= \" , hasil ) iterasi += 1 Output: iterasi ke - 1 = 1.0 iterasi ke - 2 = 8.0 iterasi ke - 3 = 32.0 iterasi ke - 4 = 85.33333333333333 iterasi ke - 5 = 170.66666666666669 iterasi ke - 6 = 273.0666666666666 iterasi ke - 7 = 364.08888888888896 iterasi ke - 8 = 416.1015873015872 iterasi ke - 9 = 416.1015873015872 iterasi ke - 10 = 369.8680776014112 iterasi ke - 11 = 295.89446208112895 iterasi ke - 12 = 215.195972422639 iterasi ke - 13 = 143.46398161509296 iterasi ke - 14 = 88.28552714774924 iterasi ke - 15 = 50.448872655856576 iterasi ke - 16 = 26.90606541645684 iterasi ke - 17 = 13.45303270822842 iterasi ke - 18 = 6.330838921519444 iterasi ke - 19 = 2.8137061873417224 iterasi ke - 20 = 1.184718394670199 iterasi ke - 21 = 0.47388735786807956 iterasi ke - 22 = 0.18052851728316455 iterasi ke - 23 = 0.06564673355751438 iterasi ke - 24 = 0.022833646454728296 iterasi ke - 25 = 0.0076112154847578495 iterasi ke - 26 = 0.0024355889549951826 iterasi ke - 27 = 0.0007494119863622473 Sekian dan terima kasih semoga bermanfaat. MathJax.Hub.Config({ tex2jax: {inlineMath: [['$$','$$']]} });","title":"LISTING PROGRAM"},{"location":"NewtonRapshon/","text":"Metode Newton Rapshon \u00b6 Metode Newtown Rapshon adalah pencarian root yang menggunakan pendekatan linier. Secara khusus, kami menebak solusi x_0 x_0 dari persamaan f(x)=0 f(x)=0 , menghitung perkiraan linier dari f(x) f(x) pada x_0 x_0 dan kemudian menemukan x x -intercept dari pendekatan linier . Rumus \u00b6 Biarkan f(x) f(x) menjadi fungsi yang dapat dibedakan. Jika x_0 x_0 mendekati solusi f(x)=0 f(x)=0 maka kita dapat memperkirakan f(x) f(x) dengan garis singgung pada x_0 x_0 dan menghitung x x -terima dari garis singgung. Persamaan garis singgung pada x_0 x_0 adalah y=f\u2032(x_0)(x\u2212x_0)+f(x_0) y=f\u2032(x_0)(x\u2212x_0)+f(x_0) x x -intercept adalah solusi x_1 x_1 dari persamaan 0=f\u2032(x_0)(x_1\u2212x_0)+f(x_0) 0=f\u2032(x_0)(x_1\u2212x_0)+f(x_0) dan kami menyelesaikannya dengan x_1 x_1 x1=x0\u2212 \\frac{f(x_0)}{f\u2032(x_0)} x1=x0\u2212 \\frac{f(x_0)}{f\u2032(x_0)} Jika kami menerapkan prosedur ini berulang kali, maka kami memperoleh urutan yang diberikan oleh rumus rekursif xn+1=xn\u2212 \\frac{f(x_n)}{f\u2032(x_n)} xn+1=xn\u2212 \\frac{f(x_n)}{f\u2032(x_n)} yang (berpotensi) konvergen ke solusi persamaan f(x)=0 f(x)=0 . Menyusun Algoritma dan Pemrograman Newton Rhapson \u00b6 dari rumus yang kita dapat diatas kita dapat menyusun sebuah algoritma yang nantinya akan dibuat menjadi sebuah program. Algoritma menyusun akar - akar f(x) = 0 f(x) = 0 sebagai berikut : Didefinisikan fungsi f f dengan f(x) f(x) dan f'(x) f'(x) Ditentukan Epsilon sebagai Toleransi kesalahan serta iterasi maksimum untuk Stopping Condition Dipilih tebakan awal x_0 x_0 Dihitung f(x_0) f(x_0) dan f'(x_0) f'(x_0) Dihitung x_b = x_0 - \\frac{f(x_0)}{f'(x_0)}f'(x_0) \\neq 0 x_b = x_0 - \\frac{f(x_0)}{f'(x_0)}f'(x_0) \\neq 0 . jika f'(x_0) = 0 f'(x_0) = 0 kembali ke langkah - 3 Jika \\left | x_b - x_0 \\right | < \\varepsilon \\left | x_b - x_0 \\right | < \\varepsilon . itersasi lebih dari iterasi maksimum tulis x_{hampiran} = x_b x_{hampiran} = x_b sebagai hasil hampiran akar; jika tidak, lanjutkan ke langkah berikutnya. Ganti nilai x_0 x_0 dengan x_0 = x_b x_0 = x_b dan kembali ke langkah-4 Listing Program \u00b6 #Program python untuk memperkirakan akar polinomial #menggunakan metode newton-raphson import math #f(x) - fungsi polynomial def f ( x ): function = ( x ** 3 ) - ( 2 * x ) - 1 return function def derivative ( x ): #berfungsi untuk menemukan turunan dari polinomial h = 0.000001 derivative = ( f ( x + h ) - f ( x )) / h return derivative def newton_raphson ( x ): return ( x - ( f ( x ) / derivative ( x ))) # p - titik awal mis. nilai lebih dekat ke root # n - jmulah iterasi def iterate ( p , n ): print ( \"Banyak Iterasinya =\" , n ) x = p for i in range ( n ): x = newton_raphson ( x ) print ( \"iterasi ke-\" , i , \"=\" , x ) return ( \"\" ) print ( iterate ( 1 , 10 )) #cetakan akar polinomial x ^ 3 - 2x - 1 menggunakan 3 iterasi dan ambil titik awal sebagai 1 Output Banyak Iterasinya = 10 iterasi ke - 0 = 2.999994000093219 iterasi ke - 1 = 2.199996832141079 iterasi ke - 2 = 1.7808294919560141 iterasi ke - 3 = 1.6363030634057565 iterasi ke - 4 = 1.618304588651506 iterasi ke - 5 = 1.6180340496697716 iterasi ke - 6 = 1.6180339887499484 iterasi ke - 7 = 1.6180339887498947 iterasi ke - 8 = 1.618033988749895 iterasi ke - 9 = 1.618033988749895 MathJax.Hub.Config({ tex2jax: {inlineMath: [['$$','$$']]} });","title":"Tugas 2 Newton Raphson"},{"location":"NewtonRapshon/#metode-newton-rapshon","text":"Metode Newtown Rapshon adalah pencarian root yang menggunakan pendekatan linier. Secara khusus, kami menebak solusi x_0 x_0 dari persamaan f(x)=0 f(x)=0 , menghitung perkiraan linier dari f(x) f(x) pada x_0 x_0 dan kemudian menemukan x x -intercept dari pendekatan linier .","title":"Metode Newton Rapshon"},{"location":"NewtonRapshon/#rumus","text":"Biarkan f(x) f(x) menjadi fungsi yang dapat dibedakan. Jika x_0 x_0 mendekati solusi f(x)=0 f(x)=0 maka kita dapat memperkirakan f(x) f(x) dengan garis singgung pada x_0 x_0 dan menghitung x x -terima dari garis singgung. Persamaan garis singgung pada x_0 x_0 adalah y=f\u2032(x_0)(x\u2212x_0)+f(x_0) y=f\u2032(x_0)(x\u2212x_0)+f(x_0) x x -intercept adalah solusi x_1 x_1 dari persamaan 0=f\u2032(x_0)(x_1\u2212x_0)+f(x_0) 0=f\u2032(x_0)(x_1\u2212x_0)+f(x_0) dan kami menyelesaikannya dengan x_1 x_1 x1=x0\u2212 \\frac{f(x_0)}{f\u2032(x_0)} x1=x0\u2212 \\frac{f(x_0)}{f\u2032(x_0)} Jika kami menerapkan prosedur ini berulang kali, maka kami memperoleh urutan yang diberikan oleh rumus rekursif xn+1=xn\u2212 \\frac{f(x_n)}{f\u2032(x_n)} xn+1=xn\u2212 \\frac{f(x_n)}{f\u2032(x_n)} yang (berpotensi) konvergen ke solusi persamaan f(x)=0 f(x)=0 .","title":"Rumus"},{"location":"NewtonRapshon/#menyusun-algoritma-dan-pemrograman-newton-rhapson","text":"dari rumus yang kita dapat diatas kita dapat menyusun sebuah algoritma yang nantinya akan dibuat menjadi sebuah program. Algoritma menyusun akar - akar f(x) = 0 f(x) = 0 sebagai berikut : Didefinisikan fungsi f f dengan f(x) f(x) dan f'(x) f'(x) Ditentukan Epsilon sebagai Toleransi kesalahan serta iterasi maksimum untuk Stopping Condition Dipilih tebakan awal x_0 x_0 Dihitung f(x_0) f(x_0) dan f'(x_0) f'(x_0) Dihitung x_b = x_0 - \\frac{f(x_0)}{f'(x_0)}f'(x_0) \\neq 0 x_b = x_0 - \\frac{f(x_0)}{f'(x_0)}f'(x_0) \\neq 0 . jika f'(x_0) = 0 f'(x_0) = 0 kembali ke langkah - 3 Jika \\left | x_b - x_0 \\right | < \\varepsilon \\left | x_b - x_0 \\right | < \\varepsilon . itersasi lebih dari iterasi maksimum tulis x_{hampiran} = x_b x_{hampiran} = x_b sebagai hasil hampiran akar; jika tidak, lanjutkan ke langkah berikutnya. Ganti nilai x_0 x_0 dengan x_0 = x_b x_0 = x_b dan kembali ke langkah-4","title":"Menyusun Algoritma dan Pemrograman Newton Rhapson"},{"location":"NewtonRapshon/#listing-program","text":"#Program python untuk memperkirakan akar polinomial #menggunakan metode newton-raphson import math #f(x) - fungsi polynomial def f ( x ): function = ( x ** 3 ) - ( 2 * x ) - 1 return function def derivative ( x ): #berfungsi untuk menemukan turunan dari polinomial h = 0.000001 derivative = ( f ( x + h ) - f ( x )) / h return derivative def newton_raphson ( x ): return ( x - ( f ( x ) / derivative ( x ))) # p - titik awal mis. nilai lebih dekat ke root # n - jmulah iterasi def iterate ( p , n ): print ( \"Banyak Iterasinya =\" , n ) x = p for i in range ( n ): x = newton_raphson ( x ) print ( \"iterasi ke-\" , i , \"=\" , x ) return ( \"\" ) print ( iterate ( 1 , 10 )) #cetakan akar polinomial x ^ 3 - 2x - 1 menggunakan 3 iterasi dan ambil titik awal sebagai 1 Output Banyak Iterasinya = 10 iterasi ke - 0 = 2.999994000093219 iterasi ke - 1 = 2.199996832141079 iterasi ke - 2 = 1.7808294919560141 iterasi ke - 3 = 1.6363030634057565 iterasi ke - 4 = 1.618304588651506 iterasi ke - 5 = 1.6180340496697716 iterasi ke - 6 = 1.6180339887499484 iterasi ke - 7 = 1.6180339887498947 iterasi ke - 8 = 1.618033988749895 iterasi ke - 9 = 1.618033988749895 MathJax.Hub.Config({ tex2jax: {inlineMath: [['$$','$$']]} });","title":"Listing Program"}]}